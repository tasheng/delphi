#!/usr/bin/env python3
import os
import shutil
import glob
import sys
import subprocess
import multiprocessing

MAX_CONCURRENT_PROCESSES=20

fatmen_to_label = {
    "v97g2": "R07940",
    "xsdst96_e161_g1": "R07562",
    "xsdst96_e172_g1": "R07561",
    "xsdst96_e161_g2": "R07945",
    "xsdst96_e172_g2": "R07949",
}

PDLINPUT_txt = '''
*
* PDLINPUT file for DES multievt request
*
FILE = {}
*
'''

fatmen_to_label = {
    # "v97g1": "R07057",
    # "v97g2": "R07940",
    # "xsdst96_e161_g1": "R07562",
    # "xsdst96_e172_g1": "R07561",
    # "xsdst96_e161_g2": "R07945",
    # "xsdst96_e172_g2": "R07949",
    # "xs_kk2f4143qq_e182.7_l97_1l_g1" : "lyon/kk2f4143/v97g/182.7/kk2f4143_qq",
    # "xs_kk2f4144qqar_e182.7_l97_1l_g1" : "lyon/kk2f4144/v97g/182.7/kk2f4144_qqar",
    # "xs_kk2f4145qqpybe321_e182.7_c97_1l_g1" : "cern/kk2f4145/v97g/182.7/kk2f4145_qqpybe321",
    # "xs_kk2f4146qqardcy_e182.7_c97_1l_g1" : "cern/kk2f4146/v97g/182.7/kk2f4146_qqardcy",
    "xs_wphact24cc_e182.7_m80.4_c97_1l_g1" : "cern/wphact24/v97g/182.7/wphact24_cc",
    "xs_wphact22ccbe32i_e182.7_m80.4_c97_1l_g1" : "cern/wphact22/v97g/182.7/wphact22_ccbe32i",
}

def infer_year(yeartype):
    """Infers the yea
    r from the yeartype string."""
    if '9' in yeartype:
        return '19' + yeartype[yeartype.find('9'):yeartype.find('9') + 2]
    return None

def process_al_file(al, nickname, yeartype):
    basename = os.path.basename(al.strip('.al'))
    tmp_dir = f'tmp_{basename}'
    os.makedirs(tmp_dir, exist_ok=True)
    # subprocess.run(['cp', '-r', r'dump/*', tmp_dir], check=True)
    os.system(f'cp -r dump{suffix}/* {tmp_dir}')
    os.chdir(tmp_dir)
    try:
        with open('PDLINPUT', 'w') as f:
            f.write(PDLINPUT_txt.format(al))
        subprocess.run(['cat', 'PDLINPUT'], check=True)
        subprocess.run(['bash', './dump.sh', f'{basename}'], check=True)
        grep_output = subprocess.run(['grep', '-c', 'HAPPY', f'dump.{basename}.log'], capture_output=True, text=True, check=True)
        print(f"Recorded {grep_output.stdout.strip()} events in {basename}!")
        os.makedirs('../log', exist_ok=True)
        os.makedirs('../err', exist_ok=True)
        os.rename(f'dump.{basename}.log', f'../log/dump.{basename}.log')
        os.rename(f'dump.{basename}.err', f'../err/dump.{basename}.err')
        subprocess.run([f'../bin/convert{suffix}.exe', f'../log/dump.{basename}.log', f'../out/{basename}.root'], check=True)
        year = infer_year(yeartype)
        print(f'year: {year}')
        out_top = "simulation" if suffix == "MC" else "collision"
        if year:
            # top = f'/eos/user/t/tsheng/DELPHI/{out_top}_data/{year}/{yeartype}/'
            top = f'/data/DELPHI/{out_top}_data/{year}/{yeartype}/'
            os.makedirs(top, exist_ok=True)
            os.makedirs('../out', exist_ok=True)
            subprocess.run(['mv', f'../out/{basename}.root', top], check=True)
        else:
            print(f"Could not infer year from yeartype: {yeartype}. Skipping move to EOS.")
        os.remove(f'../log/dump.{basename}.log')
        os.remove(f'../err/dump.{basename}.err')
        os.remove(f'dump.exe')
        os.remove(f'dump.car')
    except subprocess.CalledProcessError as e:
        print(f"Error processing {al}: {e}")
    finally:
        os.chdir('..')
        # Optionally remove the temporary directory
        shutil.rmtree(tmp_dir)

if __name__ == "__main__":

    if len(sys.argv) > 1 and sys.argv[1] == "mc":
        suffix = "MC"
        lib = "-lEG "
    else:
        suffix = ""
        lib = ""

    os.system('mkdir -p ./bin/')
    compilation = f'g++ `root-config --glibs --cflags` {lib}-I TPCNtupleFormat/ `$FASTJETDIR/bin/fastjet-config --cxxflags --libs --plugins` -o bin/convert{suffix}.exe convert{suffix}.C'
    os.system(compilation)

    os.makedirs('log', exist_ok=True)
    os.makedirs('err', exist_ok=True)
    os.makedirs('out', exist_ok=True)
    os.makedirs('dump', exist_ok=True) # Ensure dump directory exists

    processes = []

    for yeartype, nickname in fatmen_to_label.items():
        if suffix == "MC":
            path = f'/eos/opendata/delphi/simulated-data/{nickname}*.xsdst'
        else:
            path = f'/eos/opendata/delphi/collision-data/{nickname}/{nickname}.*.al'

        al_files = glob.glob(path)
        processes = []
        with multiprocessing.Pool(processes=MAX_CONCURRENT_PROCESSES) as pool:
            tasks = [(al, nickname, yeartype) for al in al_files]
            pool.starmap(process_al_file, tasks)
        # for al in al_files:
        #     process = multiprocessing.Process(target=process_al_file, args=(al, nickname, yeartype))
        #     processes.append(process)
        #     process.start()

        # for process in processes:
        #     process.join()

    print("All background processes completed.")
